using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Xml.Linq;

namespace Radiko
{
    /// <summary>
    /// MainWindow.xaml の相互作用ロジック
    /// </summary>
    public partial class MainWindow : Window
    {

        private static string[] AvailableStations = new string[] { "HBC", "STV", "RN1", "RN2", "AIR-G", "NORTHWAVE", "HOUSOU-DAIGAKU", "JOIK", "JOAK-FM", "RAB", "AFB", "JOHK", "IBC", "FMI", "TBC", "DATEFM", "ABS", "AFM", "YBC", "RFM", "RFC", "FMF", "TBS", "QRR", "LFR", "INT", "FMT", "FMJ", "IBS", "JORF", "BAYFM78", "NACK5", "YFM", "JOAK", "CRT", "RADIOBERRY", "FMGUNMA", "BSN", "FMNIIGATA", "KNB", "FMTOYAMA", "JOCK", "MRO", "HELLOFIVE", "FBC", "FMFUKUI", "YBS", "FM-FUJI", "SBC", "FMN", "CBC", "TOKAIRADIO", "GBS", "ZIP-FM", "FMGIFU", "FMAICHI", "SBS", "K-MIX", "FMMIE", "ABC", "MBS", "OBC", "CCL", "802", "FMO", "KBS", "KISSFMKOBE", "E-RADIO", "JOBK", "ALPHA-STATION", "CRK", "WBS", "BSS", "FM-SANIN", "JOFK", "RSK", "FM-OKAYAMA", "RCC", "HFM", "KRY", "FMY", "JRT", "JOZK", "RNC", "FMKAGAWA", "RNB", "JOEU-FM", "RKC", "HI-SIX", "RKB", "KBC", "LOVEFM", "CROSSFM", "FMFUKUOKA", "JOLK", "FMS", "NBC", "FMNAGASAKI", "RKK", "FMK", "OBS", "FM_OITA", "MRT", "JOYFM", "MBC", "MYUFM", "RBC", "ROK", "FM_OKINAWA" };
        private static Hashtable StationRegion = new Hashtable { ["HBC"] = "JP1", ["STV"] = "JP1", ["RN1"] = "JP1", ["RN2"] = "JP1", ["AIR-G"] = "JP1", ["NORTHWAVE"] = "JP1", ["HOUSOU-DAIGAKU"] = "JP1", ["JOIK"] = "JP1", ["JOAK-FM"] = "JP1", ["RAB"] = "JP2", ["AFB"] = "JP2", ["JOHK"] = "JP2", ["IBC"] = "JP3", ["FMI"] = "JP3", ["TBC"] = "JP4", ["DATEFM"] = "JP4", ["ABS"] = "JP5", ["AFM"] = "JP5", ["YBC"] = "JP6", ["RFM"] = "JP6", ["RFC"] = "JP7", ["FMF"] = "JP7", ["TBS"] = "JP8", ["QRR"] = "JP8", ["LFR"] = "JP8", ["INT"] = "JP8", ["FMT"] = "JP8", ["FMJ"] = "JP8", ["IBS"] = "JP8", ["JORF"] = "JP8", ["BAYFM78"] = "JP8", ["NACK5"] = "JP8", ["YFM"] = "JP8", ["JOAK"] = "JP8", ["CRT"] = "JP9", ["RADIOBERRY"] = "JP9", ["FMGUNMA"] = "JP10", ["BSN"] = "JP15", ["FMNIIGATA"] = "JP15", ["KNB"] = "JP16", ["FMTOYAMA"] = "JP16", ["JOCK"] = "JP16", ["MRO"] = "JP17", ["HELLOFIVE"] = "JP17", ["FBC"] = "JP18", ["FMFUKUI"] = "JP18", ["YBS"] = "JP19", ["FM-FUJI"] = "JP19", ["SBC"] = "JP20", ["FMN"] = "JP20", ["CBC"] = "JP21", ["TOKAIRADIO"] = "JP21", ["GBS"] = "JP21", ["ZIP-FM"] = "JP21", ["FMGIFU"] = "JP21", ["FMAICHI"] = "JP21", ["SBS"] = "JP22", ["K-MIX"] = "JP22", ["FMMIE"] = "JP24", ["ABC"] = "JP25", ["MBS"] = "JP25", ["OBC"] = "JP25", ["CCL"] = "JP25", ["802"] = "JP25", ["FMO"] = "JP25", ["KBS"] = "JP25", ["KISSFMKOBE"] = "JP25", ["E-RADIO"] = "JP25", ["JOBK"] = "JP25", ["ALPHA-STATION"] = "JP26", ["CRK"] = "JP26", ["WBS"] = "JP30", ["BSS"] = "JP31", ["FM-SANIN"] = "JP31", ["JOFK"] = "JP31", ["RSK"] = "JP33", ["FM-OKAYAMA"] = "JP33", ["RCC"] = "JP34", ["HFM"] = "JP34", ["KRY"] = "JP35", ["FMY"] = "JP35", ["JRT"] = "JP36", ["JOZK"] = "JP36", ["RNC"] = "JP37", ["FMKAGAWA"] = "JP37", ["RNB"] = "JP38", ["JOEU-FM"] = "JP38", ["RKC"] = "JP39", ["HI-SIX"] = "JP39", ["RKB"] = "JP40", ["KBC"] = "JP40", ["LOVEFM"] = "JP40", ["CROSSFM"] = "JP40", ["FMFUKUOKA"] = "JP40", ["JOLK"] = "JP40", ["FMS"] = "JP41", ["NBC"] = "JP42", ["FMNAGASAKI"] = "JP42", ["RKK"] = "JP43", ["FMK"] = "JP43", ["OBS"] = "JP44", ["FM_OITA"] = "JP44", ["MRT"] = "JP45", ["JOYFM"] = "JP45", ["MBC"] = "JP46", ["MYUFM"] = "JP46", ["RBC"] = "JP47", ["ROK"] = "JP47", ["FM_OKINAWA"] = "JP47" };
        private static string EncodedFullKey = "";
        private static Hashtable RegionLocation = new Hashtable { ["JP1"] = new double[] { 43.064615, 141.346807 }, ["JP2"] = new double[] { 40.824308, 140.739998 }, ["JP3"] = new double[] { 39.703619, 141.152684 }, ["JP4"] = new double[] { 38.268837, 140.8721 }, ["JP5"] = new double[] { 39.718614, 140.102364 }, ["JP6"] = new double[] { 38.240436, 140.363633 }, ["JP7"] = new double[] { 37.750299, 140.467551 }, ["JP8"] = new double[] { 36.341811, 140.446793 }, ["JP9"] = new double[] { 36.565725, 139.883565 }, ["JP10"] = new double[] { 36.390668, 139.060406 }, ["JP11"] = new double[] { 35.856999, 139.648849 }, ["JP12"] = new double[] { 35.605057, 140.123306 }, ["JP13"] = new double[] { 35.689488, 139.691706 }, ["JP14"] = new double[] { 35.447507, 139.642345 }, ["JP15"] = new double[] { 37.902552, 139.023095 }, ["JP16"] = new double[] { 36.695291, 137.211338 }, ["JP17"] = new double[] { 36.594682, 136.625573 }, ["JP18"] = new double[] { 36.065178, 136.221527 }, ["JP19"] = new double[] { 35.664158, 138.568449 }, ["JP20"] = new double[] { 36.651299, 138.180956 }, ["JP21"] = new double[] { 35.391227, 136.722291 }, ["JP22"] = new double[] { 34.97712, 138.383084 }, ["JP23"] = new double[] { 35.180188, 136.906565 }, ["JP24"] = new double[] { 34.730283, 136.508588 }, ["JP25"] = new double[] { 35.004531, 135.86859 }, ["JP26"] = new double[] { 35.021247, 135.755597 }, ["JP27"] = new double[] { 34.686297, 135.519661 }, ["JP28"] = new double[] { 34.691269, 135.183071 }, ["JP29"] = new double[] { 34.685334, 135.832742 }, ["JP30"] = new double[] { 34.225987, 135.167509 }, ["JP31"] = new double[] { 35.503891, 134.237736 }, ["JP32"] = new double[] { 35.472295, 133.0505 }, ["JP33"] = new double[] { 34.661751, 133.934406 }, ["JP34"] = new double[] { 34.39656, 132.459622 }, ["JP35"] = new double[] { 34.185956, 131.470649 }, ["JP36"] = new double[] { 34.065718, 134.55936 }, ["JP37"] = new double[] { 34.340149, 134.043444 }, ["JP38"] = new double[] { 33.841624, 132.765681 }, ["JP39"] = new double[] { 33.559706, 133.531079 }, ["JP40"] = new double[] { 33.606576, 130.418297 }, ["JP41"] = new double[] { 33.249442, 130.299794 }, ["JP42"] = new double[] { 32.744839, 129.873756 }, ["JP43"] = new double[] { 32.789827, 130.741667 }, ["JP44"] = new double[] { 33.238172, 131.612619 }, ["JP45"] = new double[] { 31.911096, 131.423893 }, ["JP46"] = new double[] { 31.560146, 130.557978 }, ["JP47"] = new double[] { 26.2124, 127.680932 } };
        private ObservableCollection<Program> downloadingProgram = new ObservableCollection<Program> { };

        public MainWindow()
        {
            InitializeComponent();
        }

        private void Window_PreviewDragOver(object sender, DragEventArgs e)
        {
            e.Effects = DragDropEffects.Link;
            e.Handled = e.Data.GetDataPresent(DataFormats.Text);
        }

        private void Window_Drop(object sender, DragEventArgs e)
        {
            var url = (string)e.Data.GetData(DataFormats.Text);
            if (url != null)
            {
                if (Regex.IsMatch(url, "(https?://)?radiko.jp/#!/ts/(.+?)/([0-9]{14})"))
                {
                    var Collection = Regex.Matches(url, "radiko.jp/#!/ts/(.+?)/([0-9]{14})");
                    var StationId = Collection[0].Groups[1].Value;
                    var ft = Collection[0].Groups[2].Value;
                    if (AvailableStations.Contains(StationId))
                    {
                        Task.Run(() => DownloadProgram(StationId, ft));
                    } else
                    {
                        MessageBox.Show("URLの形式が違います");
                    }
                } else if(Regex.IsMatch(url, "(https?://)?radiko.jp/#!/live/(.+?)"))
                {
                    var Collection = Regex.Matches(url, "radiko.jp/#!/live/(.+?)");
                    var StationId = Collection[0].Groups[1].Value;
                    if (AvailableStations.Contains(StationId))
                    {
                        Task.Run(() => DownloadLiveProgram(StationId));
                    } else
                    {
                        MessageBox.Show("URLの形式が違います");
                    }
                } else
                {
                    MessageBox.Show("URLの形式が違います");
                }
            } else
            {
                MessageBox.Show("URLが空です");
            }
        }

        private void DownloadLiveProgram(string StationId)
        {
            var AuthToken = GetAuthToken(StationId);
            var StreamUrl = GetStreamUrl(StationId, true);
            var SaveDialog = new SaveFileDialog();
            SaveDialog.Filter = "AACファイル(*.aac)|*.aac|MP3ファイル(*.mp3)|*.mp3|すべてのファイル(*.*)|*.*";
            SaveDialog.FileName = StationId + ".aac";
            SaveDialog.ValidateNames = true;
            SaveDialog.OverwritePrompt = true;
            var SaveDialogResult = SaveDialog.ShowDialog();
            if (SaveDialogResult == true)
            {
                var FFmpegPath = GetCurrentAppDir() + "\\ffmpeg\\ffmpeg.exe";
                var process = new Process();
                process.StartInfo.FileName = FFmpegPath;
                process.StartInfo.WorkingDirectory = GetCurrentAppDir();
                process.StartInfo.Arguments = "-y -headers \"X-Radiko-AuthToken: " + AuthToken + "\" -i \"" + StreamUrl + "?station_id=" + StationId + "&l=15&lsid=&type=b\" \"" + SaveDialog.FileName + "\"";
                process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                process.Start();
                this.Dispatcher.Invoke((Action)(() =>
                {
                    downloadingProgram.Add(new Program
                    {
                        id = StationId,
                        title = StationId,
                        pfm = "",
                        status = "ダウンロード中",
                    });
                    downloadGrid.ItemsSource = downloadingProgram;
                }));
            }
        }
        private void DownloadProgram(string StationId, string ft)
        {
            var info = GetProgram(StationId, ft);
            var AuthToken = GetAuthToken(StationId);
            var StreamUrl = GetStreamUrl(StationId, false);
            var SaveDialog = new SaveFileDialog();
            SaveDialog.Filter = "AACファイル(*.aac)|*.aac|MP3ファイル(*.mp3)|*.mp3|すべてのファイル(*.*)|*.*";
            SaveDialog.FileName = StationId + "_" + (string)info["ft"] + "_" + (string)info["to"] + ".aac";
            SaveDialog.ValidateNames = true;
            SaveDialog.OverwritePrompt = true;
            var SaveDialogResult = SaveDialog.ShowDialog();
            if (SaveDialogResult == true)
            {
                var FFmpegPath = GetCurrentAppDir() + "\\ffmpeg\\ffmpeg.exe";
                var process = new Process();
                process.StartInfo.FileName = FFmpegPath;
                process.StartInfo.Arguments = "-y -headers \"X-Radiko-AuthToken: " + AuthToken + "\" -i \"" + StreamUrl + "?station_id=" + StationId + "&ft=" + (string)info["ft"] + "&to=" + (string)info["to"] + "&l=15&lsid=&type=b\" \"" + SaveDialog.FileName + "\"";
                process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                process.Start();
                this.Dispatcher.Invoke((Action)(() =>
                {
                    downloadingProgram.Add(new Program
                    {
                        id = (string)info["id"],
                        title = (string)info["title"],
                        pfm = (string)info["pfm"],
                        status = "ダウンロード中",
                    });
                    downloadGrid.ItemsSource = downloadingProgram;
                }));
                process.WaitForExit();
                if (process.ExitCode.Equals(0))
                {
                    this.Dispatcher.Invoke((Action)(() =>
                    {
                        for (var i = 0; i < downloadingProgram.Count; i++)
                        {
                            if (downloadingProgram[i].id.Equals(info["id"]))
                            {
                                downloadingProgram[i].status = "完了";
                                break;
                            }
                        }
                        downloadGrid.ItemsSource = downloadingProgram;
                        downloadGrid.Items.Refresh();
                    }));
                }
                else
                {
                    this.Dispatcher.Invoke((Action)(() =>
                    {
                        for (var i = 0; i < downloadingProgram.Count; i++)
                        {
                            if (downloadingProgram[i].id.Equals(info["id"]))
                            {
                                downloadingProgram[i].status = "失敗";
                                break;
                            }
                        }
                        downloadGrid.ItemsSource = downloadingProgram;
                        downloadGrid.Items.Refresh();
                    }));
                }
            }
        }
        private Hashtable GetProgram(string StationId, string ft)
        {
            var Client = new HttpClient();
            var ProgramDate = ft.Substring(0, 8);
            var RegionId = StationRegion[StationId];
            var ProgramAsync = Client.GetAsync("http://radiko.jp/v3/program/date/" + ProgramDate + "/" + RegionId + ".xml");
            ProgramAsync.Wait();
            var ProgramResult = ProgramAsync.Result;
            var xml = XElement.Parse(ProgramResult.Content.ReadAsStringAsync().Result);
            IEnumerable<XElement> stations = from item in xml.Elements("stations").Elements("station") select item;
            var ProgramInformation = new Hashtable();
            foreach (XElement station in stations)
            {
                var currentStationId = station.Attribute("id").Value;
                if (currentStationId.Equals(StationId))
                {
                    IEnumerable<XElement> programs = from item in station.Elements("progs").Elements("prog") select item;
                    foreach (XElement program in programs)
                    {
                        var currentFt = program.Attribute("ft").Value;
                        var currentTo = program.Attribute("to").Value;
                        var currentProgramTitle = program.Element("title").Value;
                        var currentProgramUrl = program.Element("url").Value;
                        var currentProgramDesc = program.Element("desc").Value;
                        var currentProgramInfo = program.Element("info").Value;
                        var currentProgramPfm = program.Element("pfm").Value;
                        var currentProgramImg = program.Element("img").Value;
                        if (currentFt.Equals(ft))
                        {
                            ProgramInformation["id"] = StationId + "_" + currentFt;
                            ProgramInformation["ft"] = currentFt;
                            ProgramInformation["to"] = currentTo;
                            ProgramInformation["title"] = currentProgramTitle;
                            ProgramInformation["url"] = currentProgramUrl;
                            ProgramInformation["desc"] = currentProgramDesc;
                            ProgramInformation["info"] = currentProgramInfo;
                            ProgramInformation["pfm"] = currentProgramPfm;
                            ProgramInformation["img"] = currentProgramImg;
                            break;
                        }
                    }
                    break;
                }
            }
            return ProgramInformation;
        }

        private string GetStreamUrl(string StationId, bool isLive)
        {
            var Client = new HttpClient();
            var StreamAsync = Client.GetAsync("https://radiko.jp/v3/station/stream/aSmartPhone7o/" + StationId + ".xml");
            StreamAsync.Wait();
            var StreamResult = StreamAsync.Result;
            if (StreamResult.StatusCode == System.Net.HttpStatusCode.OK)
            {
                XElement xml = XElement.Parse(StreamResult.Content.ReadAsStringAsync().Result);
                var StreamUrl = "";
                IEnumerable<XElement> infos = from item in xml.Elements("url") select item;
                foreach (XElement info in infos)
                {
                    var timefree = info.Attribute("timefree").Value;
                    var areafree = info.Attribute("areafree").Value;
                    var url = info.Element("playlist_create_url").Value;
                    if (isLive)
                    {
                        if (timefree.Equals("0") && areafree.Equals("1") && !url.StartsWith("https://radiko.jp/"))
                        {
                            StreamUrl = url;
                            break;
                        }
                    } else
                    {
                        if (timefree.Equals("1") && areafree.Equals("1") && url.StartsWith("https://radiko.jp/"))
                        {
                            StreamUrl = url;
                            break;
                        }
                    }
                }
                return StreamUrl;
            } else
            {
                return null;
            }
        }
        private string GetAuthToken(string StationId)
        {
            var RegionId = StationRegion[StationId];
            var Location = (double[])RegionLocation[RegionId];
            var Client = new HttpClient();
            Client.DefaultRequestHeaders.Add("X-Radiko-App", "aSmartPhone7o");
            Client.DefaultRequestHeaders.Add("X-Radiko-App-Version", "0.0.1");
            Client.DefaultRequestHeaders.Add("X-Radiko-User", "dummy_user");
            Client.DefaultRequestHeaders.Add("X-Radiko-Device", "dot.Net");
            var Auth1Request = new HttpRequestMessage(HttpMethod.Get, "https://radiko.jp/v2/api/auth1");
            var Auth1Async = Client.SendAsync(Auth1Request);
            Auth1Async.Wait();
            var Auth1Result = Auth1Async.Result;
            var AuthToken = Auth1Result.Headers.GetValues("X-Radiko-AuthToken").FirstOrDefault();
            var KeyLength = int.Parse(Auth1Result.Headers.GetValues("X-Radiko-KeyLength").FirstOrDefault());
            var KeyOffset = int.Parse(Auth1Result.Headers.GetValues("X-Radiko-KeyOffset").FirstOrDefault());
            var DecodedFullKey = Convert.FromBase64String(EncodedFullKey);
            var PartialKey = Convert.ToBase64String(DecodedFullKey.Skip(KeyOffset).Take(KeyLength).ToArray());
            var Auth2Request = new HttpRequestMessage(HttpMethod.Get, "https://radiko.jp/v2/api/auth2");
            Auth2Request.Headers.Add("X-Radiko-AuthToken", AuthToken);
            Auth2Request.Headers.Add("X-Radiko-PartialKey", PartialKey);
            Auth2Request.Headers.Add("X-Radiko-Connection", "wifi");
            Auth2Request.Headers.Add("X-Radiko-Location", Location[0] + "," + Location[1] + ",gps");
            var Auth2Async = Client.SendAsync(Auth2Request);
            Auth2Async.Wait();
            var Auth2Result = Auth2Async.Result;
            if (Auth2Result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                return AuthToken;
            } else
            {
                return null;
            }
        }
        public static string GetCurrentAppDir()
        {
            return System.IO.Path.GetDirectoryName(
                System.Reflection.Assembly.GetExecutingAssembly().Location);
        }

        private void downloadBtn_Click(object sender, RoutedEventArgs e)
        {
            var programUrl = downloadUrl.Text;
            if (programUrl != null && Regex.IsMatch(programUrl, "(https?://)?radiko.jp/#!/ts/(.+?)/([0-9]{14})")) {
                var Collection = Regex.Matches(programUrl, "radiko.jp/#!/ts/(.+?)/([0-9]{14})");
                var StationId = Collection[0].Groups[1].Value;
                var ft = Collection[0].Groups[2].Value;
                Task.Run(()=>DownloadProgram(StationId, ft));
            }
            else if (Regex.IsMatch(programUrl, "(https?://)?radiko.jp/#!/live/(.+?)"))
            {
                var Collection = Regex.Matches(programUrl, "radiko.jp/#!/live/(.+?)");
                var StationId = Collection[0].Groups[1].Value;
                if (AvailableStations.Contains(StationId))
                {
                    Task.Run(() => DownloadLiveProgram(StationId));
                }
                else
                {
                    MessageBox.Show("URLの形式が違います");
                }
            } else
            {
                MessageBox.Show("URLの形式が違います");
            }
            downloadUrl.Text = "";
        }

        private void downloadGrid_AutoGeneratingColumn(object sender, System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs e)
        {
            switch (e.PropertyName)
            {
                case "id":
                    e.Column.Visibility = Visibility.Hidden;
                    break;
                case "title":
                    e.Column.Header = "タイトル";
                    e.Column.DisplayIndex = 0;
                    break;
                case "pfm":
                    e.Column.Header = "出演者";
                    e.Column.DisplayIndex = 1;
                    break;
                case "status":
                    e.Column.Header = "状態";
                    e.Column.DisplayIndex = 2;
                    break;
                default:
                    break;
            }
        }
    }
    public class Program{
        public string id { get; set; }
        public string title { get; set; }
        public string pfm { get; set; }
        public string status { get; set; }
    }
}
